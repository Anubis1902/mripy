#!/usr/bin/env ipython_wrapper
# -*- coding: utf-8 -*-
from __future__ import print_function, division, absolute_import, unicode_literals
import argparse, re, glob
from os import path

# Dense mesh (16x > 4x > original 0.7 iso native mesh) and 
# dense -f_steps (20 rather than 10) are the keys to 
# eliminate holes in the resultant volume!


if __name__ == '__main__':
    import script_utils # Append mripy to Python path
    from mripy import afni, utils
    timer = script_utils.ScriptTimer()

    parser = argparse.ArgumentParser(description='')
    parser.add_argument('-i', '--input', required=True, help='')
    parser.add_argument('-b', '--base', required=True, help='grid parent')
    parser.add_argument('-s', '--suma', default='../SUMA', help='SUMA directory (default ../SUMA)')
    parser.add_argument('--spec', help='')
    parser.add_argument('-v', '--surf_vol', default='SurfVol_Alnd_Exp+orig', help='SurfVol (default SurfVol_Alnd_Exp+orig)')
    parser.add_argument('-c', '--combine', default='sum', help='combine both hemispheres to get a single dset')
    parser.add_argument('-o', '--prefix', help='output prefix')
    parser.add_argument('-f', '--map_func', default='median', help='')
    args = parser.parse_args()
    spec = afni.get_suma_info(args.suma, args.spec)['spec']
    
    input_dir = path.split(args.input)[0]
    input_fmt = path.join(input_dir, afni.substitute_hemi(afni.get_prefix(args.input)))
    if input_fmt == args.input: # args.input is a hemi-agnostic prefix
        input_fmt = input_fmt + '.{0}.niml.dset' # Bug fixed: not '{0}.niml.dset'
    else: # args.input is a full name, e.g., prefix.lh.niml.dset
        input_fmt = afni.substitute_hemi(args.input)
    input_files = glob.glob(input_fmt.format('*'))
    hemis = [re.search(afni.HEMI_PATTERN, fi).group(0) for fi in input_files]
    output_files = ['{0}.{1}+orig.HEAD'.format(args.prefix, hemi) for hemi in hemis]
    def insert_tmp(f): 
        p, n = path.split(f)
        return path.join(p, 'tmp.'+n)
    if len(hemis) > 1:
        output_files = [insert_tmp(fo) for fo in output_files]

    pc = utils.ParallelCaller() # Execute 2 instances of 3dSurf2Vol in parallel
    for k, hemi in enumerate(hemis):
        pc.check_call(['3dSurf2Vol',
            '-spec', spec[hemi],
            '-surf_A', 'smoothwm',
            '-surf_B', 'pial',
            '-sv', args.surf_vol,
            '-grid_parent', args.base,
            '-sdata', input_files[k],
            '-map_func', args.map_func,
            '-f_steps', '20',
            '-f_index', 'nodes',
            '-prefix', output_files[k], 
            '-overwrite'])
    pc.wait() # Wait for all 3dSurf2Vol instances
    
    if len(hemis) > 1:
        print('>> Combine both hemispheres, using "{0}" method'.format(args.combine))
        if args.combine == 'sum':
            !3dcalc -a {output_files[0]} -b {output_files[1]} -expr 'a+b' \
                -prefix {args.prefix} -overwrite
        elif args.combine == 'consist':
            !3dcalc -a {output_files[0]} -b {output_files[1]} \
                -expr 'notzero(a)*iszero(b)*a+iszero(a)*notzero(b)*b+notzero(a)*notzero(b)*equals(a,b)*a' \
                -prefix {args.prefix} -overwrite

    # Remove temp files
    for fo in output_files:
        print(fo)
        p, n = path.split(fo)
        if n.startswith('tmp.'):
            pattern = afni.get_prefix(fo, with_path=True)+'*'
            !rm {pattern}